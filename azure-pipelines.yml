jobs:
- job: guest_kernel
  variables:
    GCC_REPO: https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.6
    GCC_PREFIX: x86_64-linux-
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    maxParallel: 10
    matrix:
      4.18:
        KERNEL_REPOSITORY: https://github.com/maurossi/linux
        KERNEL_BRANCH: kernel-4.18
      4.19:
        KERNEL_REPOSITORY: https://github.com/maurossi/linux
        KERNEL_BRANCH: kernel-4.19
      4.20rc1:
        KERNEL_REPOSITORY: https://github.com/maurossi/linux
        KERNEL_BRANCH: kernel-4.20rc1
      4.20rc4:
        KERNEL_REPOSITORY: https://github.com/maurossi/linux
        KERNEL_BRANCH: kernel-4.20rc4
  steps:
  - script: |
      sudo apt-get install -y build-essential git bison flex libssl-dev libelf-dev bc python wget
    displayName: Install dependencies

  - script: |
      git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPOSITORY kernel
      git clone --depth=1 -b master $GCC_REPO gcc
    displayName: Clone the Android repo

  - script: |
      export out=$(pwd)/kernel-build/
      mkdir -p $out
      cd kernel

      echo Configuring kernel configuration
      cp arch/x86/configs/android-x86_64_defconfig .config
      make O=$out ARCH=x86_64 olddefconfig

      cp .config arch/x86/configs/android-x86_64_defconfig
      cp arch/x86/configs/android-x86_64_defconfig $out
      git clean -xfd .
      git diff .
    displayName: Update kernel config

  - script: |
      # See https://github.com/maurossi/linux/blob/kernel-4.20rc4/drivers/net/wireless/broadcom/wl/build.mk
      cd $BUILD_SOURCESDIRECTORY/kernel
      BROADCOM_DIR=drivers/net/wireless/broadcom/wl

      wget https://docs.broadcom.com/docs-and-downloads/docs/linux_sta/hybrid-v35_64-nodebug-pcoem-6_30_223_271.tar.gz
      tar zxf hybrid-v35_64-nodebug-pcoem-6_30_223_271.tar.gz -C $BROADCOM_DIR --overwrite -m
      rm -rf hybrid-v35_64-nodebug-pcoem-6_30_223_271.tar.gz

      mv $BROADCOM_DIR/lib $BROADCOM_DIR/lib64

      patch -p1 -d $BROADCOM_DIR -i wl.patch
      patch -p1 -d $BROADCOM_DIR -i linux-recent.patch
      patch -p1 -d $BROADCOM_DIR -i linux-48.patch
      patch -p1 -d $BROADCOM_DIR -i linux-411.patch
      patch -p1 -d $BROADCOM_DIR -i linux-412.patch
      patch -p1 -d $BROADCOM_DIR -i linux-415.patch
    displayName: Install Broadcom drivers

  - script: |
      export out=$(pwd)/kernel-build/
      export install=$(pwd)/kernel-install/
      mkdir -p $out
      mkdir -p $install

      export gcc=$(pwd)/gcc/bin/$GCC_PREFIX

      cd $BUILD_SOURCESDIRECTORY/kernel
      export O=$out
      export ARCH=x86_64
      export CROSS_COMPILE=$gcc
      export INSTALL_MOD_PATH=$install
      export INSTALL_PATH=$install

      make android-x86_64_defconfig

      echo Building kernel
      make -j$(nproc --all)

      echo Installing the kernel and kernel modules
      make modules_install
      make install

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/kernel/
      tar -zcvf $BUILD_ARTIFACTSTAGINGDIRECTORY/kernel/$(KERNEL_BRANCH).tar.gz $install
    displayName: Compile the Android kernel

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/kernel/$(KERNEL_BRANCH).tar.gz'
      artifactName: $(KERNEL_BRANCH)
    displayName: Publish kernel

- job: host_kernel
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    maxParallel: 10
    matrix:
      4.17:
        KERNEL_REPOSITORY: https://github.com/intel/gvt-linux
        KERNEL_BRANCH: gvt-stable-4.17
      staging:
        KERNEL_REPOSITORY: https://github.com/intel/gvt-linux
        KERNEL_BRANCH: gvt-staging
  - script: |
      sudo apt-get install -y build-essential git bison flex libssl-dev libelf-dev bc python wget
    displayName: Install dependencies

  - script: |
      git clone --depth=1 -b $KERNEL_BRANCH $KERNEL_REPOSITORY kernel
    displayName: Clone the kernel repo

  - script: |
      export out=$(pwd)/kernel-build/
      export install=$(pwd)/kernel-install/
      mkdir -p $out
      mkdir -p $install
      cd kernel

      export O=$out
      export INSTALL_MOD_PATH=$install
      export INSTALL_PATH=$install

      echo Configuring kernel configuration
      echo "" | make oldconfig

      echo Building kernel
      make -j$(nproc --all)

      echo Installing the kernel and kernel modules
      make modules_install
      make install

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/kernel/
      tar -zcvf $BUILD_ARTIFACTSTAGINGDIRECTORY/kernel/$(KERNEL_BRANCH).tar.gz $install

      echo Making the Debian package
      make -j$(nproc --all) deb-pkg
      cp ../*.deb $BUILD_ARTIFACTSTAGINGDIRECTORY/kernel/
    displayName: Compile the kernel

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/kernel/$(KERNEL_BRANCH).tar.gz'
      artifactName: $(KERNEL_BRANCH)
    displayName: Publish kernel (binary)

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/kernel/*.deb'
      artifactName: $(KERNEL_BRANCH)
    displayName: Publish kernel (package)